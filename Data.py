# -*- coding: utf-8 -*-
"""Untitled23.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19MYdLHmnaIPsp3E_vRilAN1wpBTh8F2R
"""

import pandas as pd
import numpy as np

confirmed = pd.read_csv('https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv')
deaths = pd.read_csv('https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv')
recoveries = pd.read_csv('https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv')

confirmed.head(5)

import plotly.graph_objects as go
df = confirmed.rename(columns= {"Country/Region" : "Country", "Province/State": "Province"})
df.head()

df['text'] = df['Country'] + " " + df["4/13/20"].astype(str)
fig = go.Figure(data = go.Scattergeo(
    lon = df["Long"],
    lat = df["Lat"],
    text = df["text"],
    mode = "markers",
    marker = dict(
        size = 12,
        opacity = 0.8,
        reversescale = True,
        autocolorscale = True,
        symbol = 'square',
        line = dict(
            width = 1,
            color = 'rgba(102, 102, 102)'
        ),
        cmin = 0,
        color = df['4/13/20'],
        cmax = df['4/13/20'].max(),
        colorbar_title = "COVID 19 Reported Cases"
    )
))

fig.update_layout(
    title = "COVID19 Confirmed Cases Around the World",
    geo = dict(
        scope = "world",
        showland = True,
    )
)

fig.write_html('first_figure.html', auto_open=True)

# Transform wide format to long format
confirmed = pd.melt(confirmed, id_vars=confirmed.columns[:4], value_vars = confirmed.columns[4:], var_name = 'date', value_name = 'confirmed')
deaths = pd.melt(deaths, id_vars=deaths.columns[:4], value_vars = deaths.columns[4:], var_name = 'date', value_name = 'deaths')
recoveries = pd.melt(recoveries, id_vars=recoveries.columns[:4], value_vars = recoveries.columns[4:], var_name = 'date', value_name = 'recoveries')

# Summarize confirmed and deaths data by date
confirmed_canada = confirmed[confirmed['Country/Region'] == 'Canada'].groupby('date').sum()[['confirmed']]
deaths_canada = deaths[deaths['Country/Region'] == 'Canada'].groupby('date').sum()[['deaths']]

# Extract columns from recoveries table
recoveries_canada = recoveries[recoveries['Country/Region'] == 'Canada']
canada_template = recoveries_canada[recoveries_canada.columns[:-1]].reset_index(drop=True)

# Join aggrregated confirmed and deaths data with extracted columns
confirmed_canada = canada_template.merge(confirmed_canada, how='inner', left_on='date', right_index=True)
deaths_canada = canada_template.merge(deaths_canada, how='inner', left_on='date', right_index=True)

# Add the agrregated data for Canada back to confirmed and deaths table
confirmed = confirmed[confirmed['Country/Region'] != 'Canada'].append(confirmed_canada)
deaths = deaths[deaths['Country/Region'] != 'Canada'].append(deaths_canada)

# Join confirmed, deaths and recoveries data together
data = confirmed.merge(deaths, how='inner',on=['Country/Region','Province/State','date']).merge(recoveries, how='inner',on=['Country/Region','Province/State','date'])
data['recoveries'] = data['recoveries'].astype("int")
data = data[['Province/State','Country/Region','date','Lat','Long','confirmed','deaths','recoveries']]

# Join confirmed, deaths and recoveries data together
data = confirmed.merge(deaths, how='inner',on=['Country/Region','Province/State','date']).merge(recoveries, how='inner',on=['Country/Region','Province/State','date'])
data['recoveries'] = data['recoveries'].astype("int")
data = data[['Province/State','Country/Region','date','Lat','Long','confirmed','deaths','recoveries']]

data.tail(10)

data.to_csv("data.csv")

#Top 10 Countries with highest death counts
df1 = data.sort_values('deaths',ascending = False)
df1.head(10)

df1.set_index('Country/Region').\
    plot(kind = 'pie',y ='deaths', \
         legend = False,ylabel = '',\
         title = 'Deaths By Country',\
         fontsize = 10,\
         figsize = (10,10))

#Top 10 Countries with highest infection counts
df2 = data.sort_values('confirmed',ascending = False)
df2.head(10)

df1 = data.iloc[: , :] 
df2 = data.iloc[: , :]
countries = data.columns[0:]

#Rolling window of 7 days
deaths_df_window = pd.DataFrame() 
cases_df_window = pd.DataFrame()
for a in countries:
    try:
        aa = df1[['Country/Region',a]].rolling(window=7).sum()[-30:]
        deaths_df_window = pd.concat([deaths_df_window,aa],axis = 1)
        
        b = df2[['Country/Region',a]].rolling(window=7).sum()[-30:]
        cases_df_window = pd.concat([cases_df_window,b],axis = 1)
    except:
        pass

deaths_df_window.tail()

hist_recovered= pd.read_csv('https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/archived_data/archived_time_series/time_series_2019-ncov-Recovered.csv')
hist_death=pd.read_csv('https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/archived_data/archived_time_series/time_series_2019-ncov-Deaths.csv')
hist_confirmed=pd.read_csv('https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/archived_data/archived_time_series/time_series_2019-ncov-Confirmed.csv')
